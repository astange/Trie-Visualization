package com.project;

import java.util.Collection;

/**
 * Empty Trie Class for TrieFind, TrieAdd, and any other methods we decide to implement
 * @author anthony
 *
 */
public class Trie {
	
	private TrieNode root;
	public Trie(){
		root = new TrieNode('a', "ROOT");
	}

	public int findInTrie(String key){
		return findInTrie(root, key, 0);
	}

	public void addToTrie(String name, int value) {
		TrieNode temp = root;
		int i = 0;
		while (temp.hasChild(name.charAt(i))){
			temp = temp.getChild(name.charAt(i));
			i++;
		}
		if (i == name.length()){
			temp.setString(name);
			temp.setValue(value);
		}
		else {
			if (i==0) {
				while(i<name.length()){
					temp.giveChild(name.charAt(i));
					temp = temp.getChild(name.charAt(i));
					i++;
				}
				temp.setString(name);
				temp.setValue(value);
			}
			else {
				while(i<name.length()){
					temp.giveChild(name.charAt(i));
					temp = temp.getChild(name.charAt(i));
					i++;
				}
				temp.setString(name);
				temp.setValue(value);
			}
		}
	}

	private static int findInTrie(TrieNode node, String key, int index){
		if(node == null){
			return -1;
		}
		TrieNode child = node.getChild(key.charAt(index));
		if(child != null){
			index++;
			if(index == key.length()){
				return child.getValue();
			}
			return findInTrie(child, key, index);
		}
		return -1;
	}
	
	public int removeInTrie(String key){
		return removeInTrie(root, key, 0);
	}

	private static int removeInTrie(TrieNode node, String key, int index){
		if(node == null){
			return -1;
		}
		TrieNode child = node.getChild(key.charAt(index));
		char c = key.charAt(index);
		if(child != null){
			index++;
			if(index == key.length()){
				return child.getValue();
			}
			int value = findInTrie(child, key, index);
			if(child.numChildren() == 0){
				node.removeChild(c);
			}
			return value;
		}
		return -1;
	}
	public void preorderTraversal(){
		preorderTraversal(root);
	}
	
	private void preorderTraversal(TrieNode node){
		TrieNode temp = node;
		
		Collection<TrieNode> children = temp.getAllChildren();
		for(TrieNode n: children){
			preorderTraversal(n);
		}
		if(node.getValue() != -1){
			System.out.println(node.getString() + " : " + node.getValue());
		}
	}
}
