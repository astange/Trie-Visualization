package com.project;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JTextField;

@SuppressWarnings("serial")
public class InputPanel extends JPanel{

	JButton adding;
	JButton remove;
	JButton find;
	JButton print;

	JTextField addfield;
	JTextField valueField;
	JTextField removefield;
	JTextField findfield;
	
	TreeDisplay tree;

	public InputPanel(TreeDisplay tree) {
		
		this.tree = tree;
		
		setSize(100, 50);

		adding = new JButton("Add");
		adding.addActionListener(new ButtonListener(0));
		remove = new JButton("Remove");
		remove.addActionListener(new ButtonListener(1));
		find = new JButton("Find");
		find.addActionListener(new ButtonListener(2));
		print = new JButton("Print all Students!");
		print.addActionListener(new ButtonListener(3));


		addfield = new JTextField(5);
		valueField = new JTextField(5);
		
		removefield = new JTextField(10);
		findfield = new JTextField(10);

		add(adding);
		add(addfield);
		add(valueField);
		add(remove);
		add(removefield);
		add(find);
		add(findfield);
		add(print);
	}

	class ButtonListener implements ActionListener {
		int action;

		public ButtonListener(int action) {
			this.action = action;
		}

		public void actionPerformed(ActionEvent e) {
			switch (action) {
				case 0: ((TreeDisplay) tree).addToTrie(addfield.getText(), Integer.parseInt(valueField.getText()));
						DetailPanel.addText("The String you added was: "+ addfield.getText() + " and the value inputted was: " + valueField.getText());
						addfield.setText("");
						valueField.setText("");
					break;
				case 1: int value = tree.removeInTrie(removefield.getText());
						DetailPanel.addText("The String you removed is: " + removefield.getText() 
								+ " and its value was: " + ((value==-1)?"Does not exist":value));
						removefield.setText("");
					break;
				case 2: tree.findInTrie(findfield.getText());
					break;
				case 3: tree.preorderTraversal();
					break;
			}
		}

	}



}
